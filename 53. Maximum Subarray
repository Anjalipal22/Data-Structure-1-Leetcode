 // brute force O(n2)
 int maxSubArray(vector<int>& nums) {

 int maxi=INT_MIN;
 for(int i=0;i<nums.size();i++)
 {  int sum=0;
   for(int j=i;j<nums.size();j++)
     {
       sum=sum+nums[j];
       maxi=max(maxi,sum);
       }
   }
   return maxi;
   }
   
   
 //Kadane'S also  O(n)
 int maxSubArray(vector<int>& nums) {
        int cs=0;
        int maxi=INT_MIN;
        for(auto it:nums)
        {
            cs=cs+it;
            maxi=max(cs,maxi);
            if(cs<0)
            {
                cs=0;
            }
        }
        return maxi;
        
    }
    
    
    //with indices
    int maxSubArray(vector<int>& nums) {
    int max_so_far = INT_MIN, max_ending_here = 0,
       start =0, end = 0, s=0;
 
    for (int i=0; i< size; i++ )
    {
        max_ending_here += a[i];
 
        if (max_so_far < max_ending_here)
        {
            max_so_far = max_ending_here;
            start = s;
            end = i;
        }
 
        if (max_ending_here < 0)
        {
            max_ending_here = 0;
            s = i + 1;
        }
    }
    cout << "Maximum contiguous sum is "
        << max_so_far << endl;
    cout << "Starting index "<< start
        << endl << "Ending index "<< end << endl;
}
